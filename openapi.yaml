openapi: 3.0.0
info:
  title: Employee Management System API
  version: 1.0.0
  description: API documentation for managing employees and departments - built with Java Spring Boot and MongoDB
  contact:
    name: Son Nguyen
    email: hoangson091104@gmail.com
  license:
    name: MIT License
servers:
  - url: https://employee-management-app-gdm5.onrender.com/
paths:
  /api/departments/{id}:
    get:
      summary: Get department by ID
      tags:
        - Departments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Department retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '404':
          description: Department not found
    put:
      summary: Update an existing department
      tags:
        - Departments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '200':
          description: Department updated successfully
        '400':
          description: Invalid request
        '404':
          description: Department not found
    delete:
      summary: Delete a department
      tags:
        - Departments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Department deleted successfully
        '404':
          description: Department not found
  /api/departments:
    get:
      summary: Get all departments
      tags:
        - Departments
      responses:
        '200':
          description: List of departments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
    post:
      summary: Create a new department
      tags:
        - Departments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '201':
          description: Department created successfully
        '400':
          description: Invalid request
  /api/employees/{id}:
    get:
      summary: Get employee by ID
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Employee retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
    put:
      summary: Update an existing employee
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee updated successfully
        '400':
          description: Invalid request
        '404':
          description: Employee not found
    delete:
      summary: Delete an employee
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Employee deleted successfully
        '404':
          description: Employee not found
  /api/employees:
    get:
      summary: Get all employees
      tags:
        - Employees
      responses:
        '200':
          description: List of employees retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      summary: Create a new employee
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: Employee created successfully
        '400':
          description: Invalid request
  /reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Invalid request
  /register:
    post:
      summary: Register user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid request
  /authenticate:
    post:
      summary: Authenticate user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Authentication successful
        '401':
          description: Invalid credentials
  /verify-username/{username}:
    get:
      summary: Verify username
      tags:
        - Authentication
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Username verified successfully
        '404':
          description: Username not found
components:
  schemas:
    Department:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    Employee:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        departmentId:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
